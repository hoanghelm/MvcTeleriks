using System;
using System.Configuration;
using System.Data;
using System.Web;
using System.Web.Security;
using WIRS.BusinessComponents;
using WIRS.CommonUtilities;
using WIRS.Entities;

namespace WIRS.Website
{
    public partial class Login : System.Web.UI.Page
    {
        private readonly UserBC usersBC = new UserBC();
        private readonly BasePage baseHelper = new BasePage();
        private readonly CommonFun appHelper = new CommonFun();
        protected void Page_Load(object sender, EventArgs e)
        {
            try
            {
                string strName = Request.LogonUserIdentity.Name;
                if (!this.IsPostBack)
                {
                    if (Request.QueryString["status"] != null)
                    {
                        string status = Request.QueryString["status"];
                        switch (status)
                        {
                            case "sessionExpire":
                                lblErrLogin.Text = "Session Expire, pls login again.";
                                break;
                            default:
                                lblErrLogin.Text = "Unknow status, pls login again.";
                                break;
                        }

                    }
                    else if (Request.QueryString["loginid"] != null)// sunburst ticket sso
                    {
                        CommonFun appHelper = new CommonFun();
                        string loginid = Request.QueryString["loginid"];
                        string digest = Request.QueryString["digest"];
                        digest = appHelper.RemoveSpecialCharacters(digest); //remove enter and space key
                        DataSet ds = appHelper.get_config_data("SSOKEY"); //key from sunburst
                        string key = ds.Tables[0].Rows[0]["config_value"].ToString();
                        bool isvalid = appHelper.sso_sunburstconnect(loginid, key, digest); //validate key
                        if (isvalid)
                        {
                            bool isUserExists = usersBC.CheckUserExists(loginid); //check user in own DB
                            if (isUserExists)
                            {
                                userLoginInEIP(loginid); //get login information from own DB
                            }
                        }
                        else
                        {
                            lblErrLogin.Text = "You have No Access to this system. Pls check with HR.";
                            lblErrLogin.Visible = true;
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                lblErrLogin.Text = ex.Message;
                lblErrLogin.Visible = true;
            }

        }
        
        protected void btnLogin_Click(object sender, EventArgs e)
        {
            string userId = this.txtUserID.Text.Trim();
            string password = this.txtPassword.Text;
            try
            {

                if (usersBC.ValidateUsers(userId, password))
                {
                    Session.Remove("PasswordErrorCount");
                    this.userLoginIn(userId);
                }
                else
                {
                    lblErrLogin.Text = "Invalid login.Please re-enter.";
                    UserBE userBE = usersBC.GetUserByUserID(userId);
                    if (userBE != null)
                    {

                        int MaxLoginError = Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["MaxLoginError"]);
                        if (userBE.UnsuccessfulLogin > MaxLoginError)
                        {
                            usersBC.LockUser(txtUserID.Text.Trim(), txtUserID.Text.Trim());
                            this.lblErrLogin.Text = "Account has been LOCKED, Please contact Administrator.";
                        }
                        if (userBE.AccountStatus.Equals("X"))
                        {
                            this.lblErrLogin.Text = "Account has been inactive, Please contact Administrator.";
                        }
                        else
                        {
                            this.lblErrLogin.Text = "You have No Access to this system.";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                lblErrLogin.Text = ex.Message;
                lblErrLogin.Visible = true;
            }

        }
        private void userLoginIn(string userId)
        {
            this.userLoginIn(userId, false);
        }


        private void userLoginInEIP(string userId)
        {
            try
            {
                UserBE userBE = usersBC.GetUserByUserEIP(userId);
                if (userBE.UserId != null)
                {
                    AppSession.SetSession("SESSION_OBJ_USERLOGIN", userBE);
                    if (Request.QueryString["page_id"] != null)
                    {
                        string page_id = Request.QueryString["page_id"];
                        RedirectToApprove(page_id, userId);
                    }
                    else
                    {
                        FormsAuthentication.RedirectFromLoginPage(userId, false);
                    }
                }
                else
                {
                    lblErrLogin.Text = "You have No Access to this system.";
                }
            }
            catch (Exception ex)
            {
                lblErrLogin.Text = ex.Message;
                lblErrLogin.Visible = true;
            }
        }

        private void RedirectToApprove(string page_id, string userId)
        {
            string passwordHash = ConfigurationManager.AppSettings["PasswordHash"].ToString();
            string saltKey = ConfigurationManager.AppSettings["SaltKey"].ToString();
            string viKey = ConfigurationManager.AppSettings["VIKey"].ToString();

            string page_idDecrypt = appHelper.Decrypt(page_id, passwordHash, saltKey, viKey);

            string[] substrings = page_idDecrypt.Split('|');

            string incId = substrings[0].Split('=')[1];
            string p_userId = substrings[1].Split('=')[1];
            string statusCode = substrings[2].Split('=')[1];
            string modifyDate = substrings[3].Split('=')[1];

            if (userId == p_userId)
            {
                WorkflowIncidentBC ibc = new WorkflowIncidentBC();

                ////Disable button
                DataSet vds = ibc.validate_workflowuser(incId, userId);
                DataSet whshods = ibc.validate_user_to_edit_inc(incId, userId, string.Empty);

                string incIdFirstDecrypt = appHelper.Encrypt(incId, passwordHash, saltKey, viKey);
                if (whshods.Tables[0].Rows.Count > 0)
                {
                    Response.Redirect("Create_Incident_Report.aspx?incident_id=" + incId, false);
                }
                else
                if (vds.Tables[0].Rows.Count > 0)
                {
                    Response.Redirect("Create_Incident_Report.aspx?incident_id=" + incId, false);
                }
                else
                {
                    Response.Redirect("View_Incident_Report.aspx?incident_id=" + incIdFirstDecrypt, false);
                }
            }
            else
            {
                FormsAuthentication.RedirectFromLoginPage(userId, false);
            }
        }
        private void userLoginIn(string userId, bool notChangePassword)
        {
            try
            {
                UserBE userBE = usersBC.GetUserByUserID(userId);
                if (userBE.UserId != null)
                {
                    AppSession.SetSession("SESSION_OBJ_USERLOGIN", userBE);
                    Session["UserIdForChangePassword"] = userId;
                    if (userBE.AccountStatus.Equals("L"))
                    {
                        this.lblErrLogin.Text = "Account has been locked, Please contact Administrator.";
                        return;
                    }
                    if (userBE.AccountStatus.Equals("X"))
                    {
                        this.lblErrLogin.Text = "Account has been inactive, Please contact Administrator.";
                        return;
                    }
                    if (!notChangePassword && usersBC.NeedChangePassword(userId))
                    {
                        Response.Redirect("~/FirstTimeChangePassword.aspx");
                    }

                    if (string.IsNullOrEmpty(Request.QueryString["ReturnUrl"]))
                    {
                        FormsAuthentication.RedirectFromLoginPage(userId, false);
                    }
                    else
                    {
                        FormsAuthentication.SetAuthCookie(userId, false);
                        HttpContext.Current.ApplicationInstance.CompleteRequest();
                        Response.Redirect("Home.aspx", false);
                    }
                }
                else
                {
                    lblErrLogin.Text = "You have No Access to this system.";
                }
            }
            catch (Exception ex)
            {
                lblErrLogin.Text = ex.Message;
                lblErrLogin.Visible = true;
            }
        }

    }
}
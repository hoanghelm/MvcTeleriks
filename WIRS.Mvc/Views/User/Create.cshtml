@{
    ViewData["Title"] = "Create User";
}

@section Styles {
    <link rel="stylesheet" href="~/css/telerik-controls-standardized.css" />
    <link rel="stylesheet" href="~/css/user/user-create.css" />
    <link rel="stylesheet" href="~/css/components/employee-search.css" />
}

<div class="p-6 max-w-7xl mx-auto">
    <!-- Header -->
    <div class="mb-6">
        <h1 class="text-xl font-bold text-gray-900 mb-2">Create User Account</h1>
        <p class="text-gray-600 text-sm">Fields marked with <span class="text-red-500 font-semibold">*</span> are required</p>
    </div>

    <form id="createUserForm" class="space-y-6">
        <!-- Basic Information Card -->
        <div class="card overflow-hidden">
            <div class="card-header">
                <h2 class="card-title">Basic Information</h2>
            </div>
            <div class="card-body">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <!-- User Name -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">
                            User Name <span class="text-red-500">*</span>
                        </label>
                        <div class="flex gap-2">
                            <div class="flex-1">
                                @(Html.Kendo().TextBox()
                                    .Name("UserName")
                                    .Placeholder("Enter user name")
                                    .HtmlAttributes(new { 
                                        id = "txtUserName", 
                                        required = "required",
                                        minlength = "2",
                                        maxlength = "100",
                                        title = "User name must be between 2 and 100 characters"
                                    })
                                )
                            </div>
                            @(Html.Kendo().Button()
                                .Name("btnSearchEmployee")
                                .Content("<svg class='w-4 h-4' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z'></path></svg>")
                                .HtmlAttributes(new { @class = "btn-primary" })
                                .Events(e => e.Click("openEmployeeSearch"))
                            )
                        </div>
                        <div id="userNameError" class="validation-error"></div>
                    </div>

                    <!-- User ID -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">
                            User ID <span class="text-red-500">*</span>
                        </label>
                        @(Html.Kendo().TextBox()
                            .Name("UserId")
                            .Placeholder("Enter 8-digit employee ID")
                            .HtmlAttributes(new { 
                                id = "txtUserId", 
                                required = "required", 
                                maxlength = "8", 
                                pattern = "[0-9]{8}",
                                title = "Please enter exactly 8 digits"
                            })
                            .Events(e => e.Change("onUserIdChange"))
                        )
                        <div id="userIdError" class="validation-error"></div>
                    </div>

                    <!-- User Role -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">
                            User Role <span class="text-red-500">*</span>
                        </label>
                        @(Html.Kendo().DropDownList()
                            .Name("UserRole")
                            .OptionLabel("Select User Role")
                            .DataTextField("Value")
                            .DataValueField("Code")
                            .HtmlAttributes(new {
                                id = "ddlUserRole",
                                required = "required"
                            })
                            .AutoBind(false)
                        )
                        <div id="userRoleError" class="validation-error"></div>
                    </div>

                    <!-- Email Address -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">
                            Email Address <span class="text-red-500">*</span>
                        </label>
                        @(Html.Kendo().TextBox()
                            .Name("Email")
                            .Placeholder("Enter email address")
                            .HtmlAttributes(new { 
                                id = "txtEmail", 
                                required = "required", 
                                type = "email",
                                pattern = @"[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$",
                                title = "Please enter a valid email address"
                            })
                        )
                        <div id="emailError" class="validation-error"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- User Access Management Card -->
        <div class="card overflow-hidden">
            <div class="card-header">
                <h2 class="card-title">User Access Management</h2>
            </div>
            <div class="card-body">
                <div class="flex justify-end mb-4">
                    @(Html.Kendo().Button()
                        .Name("btnAddAccess")
                        .Content("Add Access")
                        .HtmlAttributes(new { @class = "btn-primary" })
                        .Events(e => e.Click("addNewAccess"))
                    )
                </div>
                @(Html.Kendo().Grid<dynamic>()
                    .Name("userAccessGrid")
                    .Columns(columns =>
                    {
                        columns.Bound("UserRoleName").Title("User Role").Width(150).EditorTemplateName("~/Views/Shared/Dropdown/UserRoleDropDown.cshtml");
                        columns.Bound("SectorValue").Title("Sector").Width(150).EditorTemplateName("~/Views/Shared/Dropdown/SectorDropDown.cshtml");
                        columns.Bound("LOBValue").Title("LOB").Width(150).EditorTemplateName("~/Views/Shared/Dropdown/LOBDropDown.cshtml");
                        columns.Bound("DepartmentValue").Title("Department").Width(150).EditorTemplateName("~/Views/Shared/Dropdown/DepartmentDropDown.cshtml");
                        columns.Bound("LocationValue").Title("Location").Width(120).EditorTemplateName("~/Views/Shared/Dropdown/LocationDropDown.cshtml");
                        columns.Command(command => {
                            command.Edit();
                            command.Destroy();
                        }).Title("Actions").Width(120);
                    })
                    .Editable(editable => editable.Mode(GridEditMode.InLine))
                    .NoRecords(noRecords => noRecords.Template(@"
                        <div class='simple-empty-state'>
                            <p>No user access defined. Click 'Add Access' button above to add user permissions</p>
                        </div>
                    "))
                    .DataSource(dataSource => dataSource
                        .Custom()
                        .Schema(schema => schema
                            .Model(model => {
                                model.Id("Id");
                                model.Field("Id", typeof(int)).Editable(false);
                                model.Field("UserRoleCode", typeof(string));
                                model.Field("UserRoleName", typeof(string));
                                model.Field("SectorCode", typeof(string));
                                model.Field("SectorValue", typeof(string));
                                model.Field("LOBCode", typeof(string));
                                model.Field("LOBValue", typeof(string));
                                model.Field("DepartmentCode", typeof(string));
                                model.Field("DepartmentValue", typeof(string));
                                model.Field("LocationCode", typeof(string));
                                model.Field("LocationValue", typeof(string));
                            })
                        )
                        .Events(events => events.Error("onGridError"))
                    )
                )
                <div id="accessError" class="validation-error mt-3"></div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex justify-end space-x-3 pt-6">
            @(Html.Kendo().Button()
                .Name("btnCancel")
                .Content("Cancel")
                .HtmlAttributes(new { @class = "btn-cancel" })
                .Events(e => e.Click("cancelForm"))
            )
            @(Html.Kendo().Button()
                .Name("btnCreateUser")
                .Content("Create User")
                .HtmlAttributes(new { @class = "btn-primary" })
                .Events(e => e.Click("saveUser"))
            )
        </div>
    </form>
</div>

<!-- Employee Search Component -->
@{
    var employeeSearchModel = new WIRS.Mvc.ViewModels.EmployeeSearchViewModel("employeeSearchWindow", "employeeSearchGrid", "onEmployeeSearchSelect");
}
@Html.Partial("~/Views/Shared/Modal/_EmployeeSearchModal.cshtml", employeeSearchModel)


@section Scripts {
    @* Include the new framework scripts *@
    @Html.Partial("_FrameworkScripts")

    <script src="~/js/telerik-notifications.js"></script>
    <script src="~/js/telerik-skeleton-loading.js"></script>
    <script src="~/js/components/employee-search.js"></script>
    <script src="~/js/user-create-viewmodel.js"></script>
    <script>
        $(document).ready(function() {
            // Wait for framework to be ready before initializing dropdowns
            $(document).on('framework:ready', function() {
                // Initialize user management dropdowns using the new framework
                const factory = window.DropdownFactory;

                // Create user role dropdown
                const userRoleDropdown = factory.createUserRoleDropdown('#ddlUserRole');

                // Store reference for compatibility with existing code
                window.userManagementDropdowns = {
                    userRole: userRoleDropdown
                };

                console.log('User Create form dropdowns initialized with new framework');
            });

            // Initialize user create view model
            userCreateViewModel.init();

            // Initialize employee search component
            var employeeSearch = EmployeeSearchComponent.create({
                modalId: 'employeeSearchWindow',
                gridId: 'employeeSearchGrid',
                onSelectCallback: 'onEmployeeSearchSelect'
            });
        });
        
        // Custom callback for employee selection
        function onEmployeeSearchSelect(employee) {
            if (employee) {
                var userIdTextBox = $("#txtUserId").data("kendoTextBox");
                var userNameTextBox = $("#txtUserName").data("kendoTextBox");
                var emailTextBox = $("#txtEmail").data("kendoTextBox");
                
                if (userIdTextBox) userIdTextBox.value(employee.EmployeeId);
                if (userNameTextBox) userNameTextBox.value(employee.EmployeeName);
                if (emailTextBox) emailTextBox.value(employee.Email);
                
                // Show success notification
                userCreateViewModel.showNotification('Employee information loaded successfully', 'success');
            }
        }
        
        // Global function for opening employee search
        function openEmployeeSearch() {
            var instance = EmployeeSearchComponent.getInstance('employeeSearchWindow');
            if (instance) {
                instance.open();
            }
        }
    </script>
}
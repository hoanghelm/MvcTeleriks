@model WIRS.Mvc.ViewModels.HomeViewModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, Kendo.Mvc
@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Home - WIRS Dashboard";
}

<div class="p-6 max-w-7xl mx-auto">
    <!-- Dashboard Cards (unchanged) -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <div class="dashboard-card group card hover:shadow-xl transition-all duration-300 cursor-pointer border-2 border-transparent hover:border-yellow-200 transform hover:-translate-y-1"
             id="pendingCard" data-filter="pending">
            <div class="p-6">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-4">
                        <div class="flex items-center justify-center w-14 h-14 bg-gradient-to-br from-yellow-500 to-orange-600 rounded-xl shadow-md group-hover:scale-110 transition-transform duration-300">
                            <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" stroke="currentColor" fill="none" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" /></svg>
                        </div>
                        <div>
                            <h3 class="text-xl font-bold text-gray-900 mb-1">Pending Reports</h3>
                            <p class="text-gray-600">Requiring attention or approval</p>
                        </div>
                    </div>
                    <div class="flex flex-col items-end">
                        <span class="pending-count inline-flex items-center px-3 py-2 rounded-full text-sm font-semibold bg-yellow-100 text-yellow-800">0</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="dashboard-card group card hover:shadow-xl transition-all duration-300 cursor-pointer border-2 border-transparent hover:border-blue-200 transform hover:-translate-y-1"
             id="incidentCard" data-filter="all">
            <div class="p-6">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-4">
                        <div class="flex items-center justify-center w-14 h-14 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl shadow-md group-hover:scale-110 transition-transform duration-300">
                            <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" stroke="currentColor" fill="none" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" /></svg>
                        </div>
                        <div>
                            <h3 class="text-xl font-bold text-gray-900 mb-1">All Incident Reports</h3>
                            <p class="text-gray-600">View and manage all incidents</p>
                        </div>
                    </div>
                    <div class="flex flex-col items-end">
                        <span class="incident-count inline-flex items-center px-3 py-2 rounded-full text-sm font-semibold bg-blue-100 text-blue-800">0</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content Area -->
    <div class="card overflow-hidden">
        <div class="card-header">
            <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <h2 class="card-title text-xl" id="listTitle">Pending Reports</h2>
                <div class="flex items-center space-x-3">
                    <input type="text"
                           id="incidentSearchInput"
                           placeholder="Search incidents..."
                           class="input-base" />
                    <button type="button"
                            id="clearSearchBtn"
                            class="k-button btn-cancel">
                        <svg class="w-4 h-4 mr-1 inline" fill="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" stroke="currentColor" fill="none" d="M6 18 18 6M6 6l12 12" /></svg>
                        Clear
                    </button>
                    <button type="button"
                            id="refreshDataBtn"
                            class="k-button btn-cancel">
                        <svg class="w-4 h-4 mr-1 inline" fill="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" stroke="currentColor" fill="none" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99" /></svg>
                        Refresh
                    </button>
                </div>
            </div>
        </div>

        <!-- Loading Skeleton -->
        <div class="space-y-4 mb-6 p-6" id="incidentSkeleton">
            <div class="animate-pulse">
                <div class="h-12 bg-gray-200 rounded-lg mb-3"></div>
                <div class="space-y-3">
                    <div class="h-4 bg-gray-200 rounded w-3/4"></div>
                    <div class="h-4 bg-gray-200 rounded w-1/2"></div>
                    <div class="h-4 bg-gray-200 rounded w-5/6"></div>
                    <div class="h-4 bg-gray-200 rounded w-2/3"></div>
                    <div class="h-4 bg-gray-200 rounded w-4/5"></div>
                </div>
            </div>
        </div>

        <!-- Kendo Grid -->
        <div class="overflow-hidden">
            @(Html.Kendo().Grid<WIRS.Services.Models.IncidentModel>()
                        .Name("incidentGrid")
                        .Width("100%")
                        .Columns(columns =>
                        {
                            columns.Bound(m => m.IncidentId)
                            .ClientTemplate("<a href='javascript:void(0)' onclick='DashboardViewModel.api.viewIncident(\"#=incidentId#\")' class='text-blue-600 hover:text-blue-800 font-medium'>#=incidentId#</a>")
                            .Title("Incident ID").Width(140).Filterable(true);

                            columns.Bound(m => m.IncidentDateTime)
                            .ClientTemplate("#= kendo.toString(kendo.parseDate(incidentDateTime), 'dd-MMM-yyyy hh:mm tt') #")
                            .Title("Incident Date-Time").Width(140).Filterable(true);

                            columns.Bound(m => m.SbuName)
                            .ClientTemplate("#=sbuName#")
                            .Title("LOB").Width(140).Filterable(true);

                            columns.Bound(m => m.DepartmentName)
                            .ClientTemplate("#=departmentName#")
                            .Title("Department").Width(140).Filterable(true);

                            columns.Bound(m => m.IncidentDesc)
                            .ClientTemplate("#=incidentDesc#")
                            .Title("Incident Type").Width(140).Filterable(true);

                            columns.Bound(m => m.CreatorName)
                            .ClientTemplate("#=creatorName#")
                            .Title("Submitted By").Width(140).Filterable(true);

                            columns.Bound(m => m.SubmittedOn)
                            .ClientTemplate("#= kendo.toString(kendo.parseDate(submittedOn), 'dd-MMM-yyyy hh:mm tt') #")
                            .Title("Submitted On").Width(140).Filterable(true);

                            columns.Bound(m => m.StatusDesc)
                            .ClientTemplate("<span class='inline-flex items-center px-2 py-1 rounded-full text-xs font-medium " +
                            "# if(status == '08') { # badge-success # } " +
                            "else if(status == '01') { # badge-warning # } " +
                            "else if(status == '02') { # badge-info # } " +
                            "else if(status == '03') { # badge-purple # } " +
                            "else { # badge-gray # } #'>" +
                            "#=statusDesc#</span>")
                            .Title("Status").Width(120).Filterable(true);

                            columns.Template("<a href='javascript:void(0)' onclick='DashboardViewModel.api.printIncident(\"#=incidentId#\")' class='k-button k-button-solid-secondary k-rounded-md k-button-sm'><svg class='w-4 h-4' fill='currentColor' viewBox='0 0 24 24'><path d='M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3zm-3 11H8v-5h8v5zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1-9H6v4h12V3z'/></svg></a>")
                            .Title("Actions").Width(80);
                        })
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(new int[] { 15, 25, 50 })
                        .ButtonCount(5))
                        .Sortable()
                        .Filterable(filterable => filterable
                        .Mode(GridFilterMode.Row)
                        .Extra(false))
                        .Scrollable()
                        .Events(e => e
                        .DataBound("DashboardViewModel.api.onGridDataBound")
                        .Filter("DashboardViewModel.api.onGridFilter"))
                        .DataSource(dataSource => dataSource
                        .Custom()
                        .PageSize(15)
                        //.ServerOperation(false)
                        .Schema(schema => schema
                        .Data("data")
                        .Total("total")
                        .Model(model =>
                        {
                            model.Id("incidentId");
                            model.Field("incidentId", typeof(string)).DefaultValue("");
                            model.Field("incidentDateTime", typeof(DateTime));
                            model.Field("sbuName", typeof(string)).DefaultValue("");
                            model.Field("departmentName", typeof(string)).DefaultValue("");
                            model.Field("incidentDesc", typeof(string)).DefaultValue("");
                            model.Field("creatorName", typeof(string)).DefaultValue("");
                            model.Field("submittedOn", typeof(DateTime));
                            model.Field("statusDesc", typeof(string)).DefaultValue("");
                            model.Field("status", typeof(string)).DefaultValue("");
                        })
                        )
                        .Events(e => e.Error("DashboardViewModel.api.onGridError")))
                        )
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/telerik-notifications.js"></script>
    <script src="~/js/dashboard-viewmodel.js" asp-append-version="true"></script>
    <script>
        $(document).ready(function() {
            DashboardViewModel.init();
        });
    </script>
}